
parameters:
  serviceConnection: ''
  resourceGroup: ''
  automationName: ''
  location: ''
  subscriptionId: ''
  certThumbprint: ''
  keyVaultName: ''

steps:
# get the ApplicationId from Keyvault
- task: AzurePowerShell@3
  displayName: "Get the Appid from keyvault"
  inputs:
    azureSubscription: '${{ parameters.serviceConnection }}'
    ScriptType: 'InlineScript'
    Inline: |-
      $vaultValue = (Get-AzureKeyVaultSecret -VaultName ${{ parameters.keyVaultName }} -Name "ApplicationId").SecretValueText
      Write-Host "##vso[task.setvariable variable=applicationId]$vaultValue" 
    azurePowerShellVersion: 'LatestVersion'

# Create Automation Account using ARM    
- task: AzureResourceGroupDeployment@2
  displayName: "Create Azure Automation account"
  inputs:
    azureSubscription: '${{ parameters.serviceConnection }}'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '${{ parameters.resourceGroup }}'
    location: '${{ parameters.location }}'
    templateLocation: 'Linked artifact'
    csmFile: '$(System.DefaultWorkingDirectory)/deployment/ARM/templates/automationacct.json'
    csmParametersFile: '$(System.DefaultWorkingDirectory)/deployment/ARM/parameters/automationacct.json'
    overrideParameters: '-automationAccountName ${{ parameters.automationName }} -location ${{ parameters.location }} -ApplicationId $(applicationId) -SubscriptionId ${{ parameters.subscriptionId }} -CertThumbprint ${{ parameters.certThumbprint }}'
    deploymentMode: 'Incremental'
    addSpnToEnvironment: true

##  need to run after the  keyvault step and needs windows agent
- task: AzurePowerShell@3
  displayName: "import runbook code and create webhook"
  inputs:
    azureSubscription: '${{ parameters.serviceConnection }}'
    ScriptType: 'FilePath'
    ScriptPath: '$(System.DefaultWorkingDirectory)/deployment/scripts/automationAcct.ps1'
    ScriptArguments: '-accountName ${{ parameters.automationName }} -resourceGroup ${{ parameters.resourceGroup }} -scriptFolder $(System.DefaultWorkingDirectory)/deployment/scripts -keyvaultName ${{ parameters.keyVaultName }}'
    azurePowerShellVersion: 'LatestVersion'
