
parameters:
  serviceConnection: ''
  resourceGroup: ''
  location: ''
  appConfigName: ''
  keyVaultName: ''
  userObjId: ''
  defaultSASKeyName: ''
  applicationCode: ''
  crslplatformKeyvault: ''
  platformOperationServiceConnection: ''
  storageAccountName: ''
  eventHubName: ''
  cosmosDBAccount: ''
  mapsName: ''

steps:

- task: AzureCLI@1
  displayName: Get Sendgrid API key from Operation Keyvault
  inputs:
    azureSubscription: ${{ parameters.platformOperationServiceConnection }}
    scriptLocation: 'inlineScript'
    inlineScript: |-
      KeyVault=${{ parameters.crslplatformKeyvault }}
      SendGridSecret=${{ parameters.applicationCode }}-sendgridapikey
      SendGridApiKey=$(az keyvault secret show --name $SendGridSecret --vault-name $KeyVault | grep value | awk -F '\"' '{print $4}')

      echo "##vso[task.setvariable variable=SendGridApiKey]$SendGridApiKey"
    addSpnToEnvironment: true

- task: AzureCLI@1
  displayName: Get ObjectId of Service Principal
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptLocation: 'inlineScript'
    inlineScript: |-
      objectId=$(az ad sp show --id $servicePrincipalId | jq -r .objectId)
      echo $objectId
      echo "##vso[task.setvariable variable=servicePrincipalObjectId]$objectId"
    addSpnToEnvironment: true
- task: AzureResourceGroupDeployment@2
  displayName: "Deploy Key Vault"
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    action: 'Create Or Update Resource Group'
    resourceGroupName: ${{ parameters.resourceGroup }}
    location: ${{ parameters.location }}
    templateLocation: 'Linked artifact'
    csmFile: '$(System.DefaultWorkingDirectory)/deployment/ARM/templates/keyvault.json'
    csmParametersFile: '$(System.DefaultWorkingDirectory)/deployment/ARM/parameters/keyvault.json'
    overrideParameters: '-resourceName ${{ parameters.keyVaultName }} -applicationObjId $(servicePrincipalObjectId) -userObjId ${{ parameters.userObjId }}'
    deploymentMode: 'Incremental'
    #addSpnToEnvironment: true

- task: AzureCLI@1
  displayName: "Add secrets to keyvault"
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptLocation: 'inlineScript'
    inlineScript: |-
      rg=${{ parameters.resourceGroup }}
      kVaultName=${{ parameters.keyVaultName }}
      blobStorageAccountName=${{ parameters.storageAccountName }}
      blobStorageKey=$(az storage account keys list -g $rg -n $blobStorageAccountName --query "[?contains(keyName, 'key1')]".value --output tsv)
      blobStorageConnString="DefaultEndpointsProtocol=https;AccountName=$blobStorageAccountName;AccountKey=$blobStorageKey;EndpointSuffix=core.windows.net"
      cosmosDbAccountName=${{ parameters.cosmosDBAccount }}
      cosmosDBUri=$(az cosmosdb show -g $rg -n $cosmosDbAccountName | jq -r ".documentEndpoint")
      cosmosDBAuthKey=$(az cosmosdb keys list --resource-group $rg --name $cosmosDbAccountName --query primaryMasterKey --output tsv)
      cosmosDBConnection="AccountEndpoint=$cosmosDBUri;AccountKey=$cosmosDBAuthKey;"
      eventhubNamespace=${{ parameters.eventHubName }}
      ehQueueAuthRule='iothubroutes'
      evAccessKeyName=${{ parameters.defaultSASKeyName }}
      evAccessPolicyKey=$(az eventhubs namespace authorization-rule keys list -n $evAccessKeyName -g $rg --namespace-name $eventhubNamespace --query primaryKey -o tsv)
      lifecycleEv=$(az eventhubs eventhub list --resource-group $rg --namespace-name $eventhubNamespace --query "[?contains(name, 'lifecycle')]".name --output tsv)
      lifecycleEvConn=$(az eventhubs eventhub authorization-rule keys list --resource-group $rg --namespace-name $eventhubNamespace --eventhub-name $lifecycleEv --name $ehQueueAuthRule --query primaryConnectionString --output tsv)
      telemetryEv=$(az eventhubs eventhub list --resource-group $rg --namespace-name $eventhubNamespace --query "[?contains(name, 'telemetry')]".name --output tsv)
      telemetryEvConn=$(az eventhubs eventhub authorization-rule keys list --resource-group $rg --namespace-name $eventhubNamespace --eventhub-name $telemetryEv --name $ehQueueAuthRule --query primaryConnectionString --output tsv)
      twinchangeEv=$(az eventhubs eventhub list --resource-group $rg --namespace-name $eventhubNamespace --query "[?contains(name, 'twin-change')]".name --output tsv)
      twinchangeEvConn=$(az eventhubs eventhub authorization-rule keys list --resource-group $rg --namespace-name $eventhubNamespace --eventhub-name $twinchangeEv --name $ehQueueAuthRule --query primaryConnectionString --output tsv)
      mapsacct=${{ parameters.mapsName }}
      mapskey=$(az maps account keys list --name $mapsacct --resource-group $rg --query primaryKey --output tsv)
      az keyvault secret set --vault-name $kVaultName --name 'ConfigService--AzureMapsKey' --value $mapskey
      az keyvault secret set --vault-name $kVaultName --name 'Global--CosmosDb--DocumentDbAuthKey' --value $cosmosDBAuthKey
      az keyvault secret set --vault-name $kVaultName --name 'Global--CosmosDb--DocumentDbConnectionString' --value $cosmosDBConnection
      az keyvault secret set --vault-name $kVaultName --name 'Global--CosmosDb--DocumentDbEndpoint' --value $cosmosDBUri
      az keyvault secret set --vault-name $kVaultName --name 'Global--ServicePrincipalId' --value $servicePrincipalId
      az keyvault secret set --vault-name $kVaultName --name 'Global--StorageAccountConnectionString' --value $blobStorageConnString
      az keyvault secret set --vault-name $kVaultName --name 'Global--ServicePrincipalKey' --value $servicePrincipalKey
      az keyvault secret set --vault-name $kVaultName --name 'TenantManagerService--LifecycleEventHubConnectionString' --value $lifecycleEvConn
      az keyvault secret set --vault-name $kVaultName --name 'TenantManagerService--TelemetryEventHubConnectionString' --value $telemetryEvConn
      az keyvault secret set --vault-name $kVaultName --name 'TenantManagerService--TwinChangeEventHubConnectionString' --value $twinchangeEvConn
      az keyvault secret set --vault-name $kVaultName --name 'IdentityGatewayService--SendGridApiKey' --value $(SendGridApiKey)
      az keyvault secret set --vault-name $kVaultName --name 'TenantManagerService--EventHubAccessPolicyKey' --value $evAccessPolicyKey
    addSpnToEnvironment: true
