parameters:
  service: ''
  azureSubscription: ''
  resourceGroup: ''
  aksCluster: ''
  devSpace: ''
  azureAppConfigurationName: ''

jobs:
- job:
  displayName: Test ${{parameters.service}} Service
  pool:
      vmImage: 'ubuntu-latest'
  steps:

  - task: AzureCLI@1
    displayName: Get Azure App Confguration connection string
    inputs:
    azureSubscription: ${{parameters.azureSubscription}}
    scriptLocation: 'inlineScript'
    inlineScript: |
        appConfigurationConnectionString=`az appconfig credential list --name ${{parameters.azureAppConfigurationName}} --resource-group ${{parameters.resourceGroup}} --query "[?name=='Primary'].connectionString | [0]" --output tsv`
        echo "##vso[task.setvariable variable=appConfigurationConnectionString]$appConfigurationConnectionString"

  - task: DotNetCoreCLI@2
    displayName: Set AppConfigurationConnectionString user secret
    inputs:
      command: custom
      custom: user-secrets set --project ./common/Services/Services.csproj AppConfigurationConnectionString $(appConfigurationConnectionString)

  - task: DotNetCoreCLI@2
    displayName: Unit Test
    inputs:
      command: test
      projects: '${{parameters.service}}/**/*Test.csproj'

  - task: AzureCLI@1
    displayName: Get Service Dev Space URL and Update Env File
    inputs:
      azureSubscription: ${{parameters.azureSubscription}}
      scriptLocation: 'inlineScript'
      inlineScript: |
        az aks use-dev-spaces -g ${{parameters.resourceGroup}} -n ${{parameters.aksCluster}} -s ${{parameters.devSpace}} -y
        az aks get-credentials -g ${{parameters.resourceGroup}} -n ${{parameters.aksCluster}}
        serviceUri=`azds list-uris -o json | jq -r '.[] | select(.workloadName=="${{parameters.service}}") | .uri'`
        echo $serviceUri
        jq -r --arg serviceUri "$serviceUri" '.values[0].value = $serviceUri' ${{parameters.service}}/WebService.Test/newmanEnvironment.json > tempEnv
        mv tempEnv ${{parameters.service}}/WebService.Test/newmanEnvironment.json
        cat ${{parameters.service}}/WebService.Test/newmanEnvironment.json

  - task: Bash@3
    displayName: Install Newman
    inputs:
      targetType: 'inline'
      script: |
        sudo npm install newman -g

  - task: NewmanPostman@4
    displayName: Run Postman Integration Tests
    inputs:
      collectionSourceType: 'file'
      Contents: '${{parameters.service}}/WebService.Test/testCollection.json'
      environment: '${{parameters.service}}/WebService.Test/newmanEnvironment.json'
      reporters: 'cli,junit'
      reporterJUnitExport: $(System.DefaultWorkingDirectory)/${{parameters.service}}-integration-test-report.xml

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/${{parameters.service}}-integration-test-report.xml'