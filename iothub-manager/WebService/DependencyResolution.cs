// Copyright (c) Microsoft. All rights reserved.

using System.Reflection;
using Autofac;
using Mmm.Platform.IoT.Common.Services;
using Mmm.Platform.IoT.Common.Services.Auth;
using Mmm.Platform.IoT.Common.Services.Diagnostics;
using Mmm.Platform.IoT.Common.Services.External;
using Mmm.Platform.IoT.Common.Services.External.StorageAdapter;
using Mmm.Platform.IoT.Common.Services.Helpers;
using Mmm.Platform.IoT.Common.Services.Http;
using Mmm.Platform.IoT.Common.Services.Runtime;
using Mmm.Platform.IoT.IoTHubManager.Services;
using Mmm.Platform.IoT.IoTHubManager.Services.Runtime;
using Mmm.Platform.IoT.IoTHubManager.WebService.Runtime;

namespace Mmm.Platform.IoT.IoTHubManager.WebService
{
    public class DependencyResolution : DependencyResolutionBase
    {
        protected override void SetupCustomRules(ContainerBuilder builder, ILogger logger, IHttpClient httpClient)
        {
            // Auto-wire additional assemblies
            var assembly = typeof(IServicesConfig).GetTypeInfo().Assembly;
            builder.RegisterAssemblyTypes(assembly).AsImplementedInterfaces();

            // Make sure the configuration is read only once.
            IConfig config = new Runtime.Config(new ConfigData(new Logger(Uptime.ProcessId, LogLevel.Info)));
            builder.RegisterInstance(config).As<IConfig>().SingleInstance();

            // Service configuration is generated by the entry point, so we
            // prepare the instance here.
            builder.RegisterInstance(config.ServicesConfig).As<IServicesConfig>().SingleInstance();
            builder.RegisterInstance(config.ServicesConfig).As<IStorageAdapterClientConfig>().SingleInstance();
            builder.RegisterInstance(config.ServicesConfig).As<IUserManagementClientConfig>().SingleInstance();
            builder.RegisterInstance(config.ServicesConfig).As<IAppConfigClientConfig>().SingleInstance();
            builder.RegisterInstance(config.ServicesConfig).As<IAuthMiddlewareConfig>().SingleInstance();

            // Auth and CORS setup
            Auth.Startup.SetupDependencies(builder, config);

            // By default Autofac uses a request lifetime, creating new objects
            // for each request, which is good to reduce the risk of memory
            // leaks, but not so good for the overall performance.
            builder.RegisterType<Services.Devices>().As<IDevices>().SingleInstance();
            builder.RegisterType<DeviceService>().As<IDeviceService>().SingleInstance();
            builder.RegisterType<Jobs>().As<IJobs>().SingleInstance();
            builder.RegisterType<DeviceProperties>().As<IDeviceProperties>().SingleInstance();
        }
    }
}
