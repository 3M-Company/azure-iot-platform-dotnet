using System.Reflection;
using Autofac;
using Mmm.Platform.IoT.Common.Services.Diagnostics;
using Mmm.Platform.IoT.Common.Services.External;
using Mmm.Platform.IoT.Common.Services.Runtime;
using Mmm.Platform.IoT.Common.WebService;
using Mmm.Platform.IoT.Common.WebService.Auth;
using MMM.Azure.IoTSolutions.TenantManager.Services.Helpers;
using MMM.Azure.IoTSolutions.TenantManager.Services.Runtime;
using MMM.Azure.IoTSolutions.TenantManager.WebService.Runtime;
using Mmm.Platform.IoT.Common.Services.Http;

namespace MMM.Azure.IoTSolutions.TenantManager.WebService
{
    public class DependencyResolution : DependencyResolutionBase
    {
        protected override void SetupCustomRules(ContainerBuilder builder, ILogger logger, IHttpClient httpClient)
        {
            // Auto-wire additional assemblies
            var assembly = typeof(IServicesConfig).GetTypeInfo().Assembly;
            builder.RegisterAssemblyTypes(assembly).AsImplementedInterfaces();

            // Make sure the configuration is read only once.
            IConfig config = new Config(new ConfigData(logger));
            builder.RegisterInstance(config).As<IConfig>().SingleInstance();

            // Service configuration is generated by the entry point, so we
            // prepare the instance here.
            builder.RegisterInstance(config.ServicesConfig).As<IServicesConfig>().SingleInstance();
            builder.RegisterInstance(config.ServicesConfig).As<IUserManagementClientConfig>().SingleInstance();
            builder.RegisterInstance(config.ServicesConfig).As<IAuthMiddlewareConfig>().SingleInstance();

            // Add helpers
            var tokenHelper = new TokenHelper(config.ServicesConfig);
            builder.RegisterInstance(new TenantRunbookHelper(config.ServicesConfig, tokenHelper)).As<TenantRunbookHelper>().SingleInstance();
            builder.RegisterInstance(new CosmosHelper(config.ServicesConfig)).As<CosmosHelper>().SingleInstance();
            builder.RegisterInstance(new TableStorageHelper(config.ServicesConfig)).As<TableStorageHelper>().SingleInstance();
            builder.RegisterType<ExternalRequestHelper>().As<IExternalRequestHelper>().SingleInstance();

            // Auth and CORS setup
            Auth.Startup.SetupDependencies(builder, config);
        }
    }
}