// Copyright (c) Microsoft. All rights reserved.

using System.Reflection;
using Autofac;
using Microsoft.Azure.Documents;
using Mmm.Platform.IoT.StorageAdapter.Services;
using Mmm.Platform.IoT.StorageAdapter.Services.Runtime;
using Mmm.Platform.IoT.StorageAdapter.Services.Wrappers;
using Mmm.Platform.IoT.StorageAdapter.WebService.Runtime;
using Mmm.Platform.IoT.StorageAdapter.WebService.Wrappers;
using Mmm.Platform.IoT.Common.Services.Diagnostics;
using Mmm.Platform.IoT.Common.Services.Http;
using Mmm.Platform.IoT.Common.Services.Runtime;
using Mmm.Platform.IoT.Common.Services.Wrappers;
using Mmm.Platform.IoT.Common.WebService;

namespace Mmm.Platform.IoT.StorageAdapter.WebService
{
    public class DependencyResolution : DependencyResolutionBase
    {
        protected override void SetupCustomRules(ContainerBuilder builder, ILogger logger, IHttpClient httpClient)
        {
            // Auto-wire additional assemblies
            var assembly = typeof(IServicesConfig).GetTypeInfo().Assembly;
            builder.RegisterAssemblyTypes(assembly).AsImplementedInterfaces();

            // Make sure the configuration is read only once.
            var config = new Config(new ConfigData(logger));
            builder.RegisterInstance(config).As<IConfig>().SingleInstance();

            // Service configuration is generated by the entry point, so we
            // prepare the instance here.
            builder.RegisterInstance(config.ServicesConfig).As<IServicesConfig>().SingleInstance();

            // By default Autofac uses a request lifetime, creating new objects
            // for each request, which is good to reduce the risk of memory
            // leaks, but not so good for the overall performance.
            builder.RegisterType<DocumentDbKeyValueContainer>().As<IKeyValueContainer>().SingleInstance();
            builder.RegisterType<DocumentClientFactory>().As<IFactory<IDocumentClient>>().SingleInstance();
            builder.RegisterType<DocumentClientExceptionChecker>().As<IExceptionChecker>().SingleInstance();
            builder.RegisterType<GuidKeyGenerator>().As<IKeyGenerator>().SingleInstance();
        }
    }
}
